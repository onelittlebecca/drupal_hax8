<?php

/**
 * @file
 * Headless Authoring eXperience, all we do is accept calls and make things haxable in the first place.
 *
 * pulls in the file referencing the webcomponents store and allowing for pulling in webcomponents
 */
include_once 'HAXService.php';

/**
 * Because hook_menu is no more...
 */
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function hax8_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        case 'help.page.hax8':
            return t('Get help for Hax here... and put in more info with words from someone who brains well...');
    }
}

/**
 * Implements hook_permission().
 */
//function hax_permission() {
//    return array(
//        'use hax' =>  array(
//            'title' => t('Use HAX editor'),
//            'description' => t('Advanced authoring experience that is pulled in from hax capable web components.'),
//        ),
//    );
//}

/**
 * Implements hook_menu() -- which doesnt exist anymore...
 */
function hax_menu() {
    $items['hax-node-save/%node/%'] = array(
        'page callback' => '_hax_node_save',
        'page arguments' => array(1, 2),
        'type' => MENU_CALLBACK,
        'access callback' => '_hax_node_access',
        'access arguments' => array('update', 1),
    );
    $items['hax-app-store/%'] = array(
        'page callback' => '_hax_load_app_store',
        'page arguments' => array(1),
        'type' => MENU_CALLBACK,
        'access callback' => 'user_access',
        'access arguments' => array('use hax'),
    );
    $items['node/%node/hax'] = array(
        'title' => 'HAX mode',
        'description' => 'Edit the node with HAX',
        'page callback' => '_hax_node_form',
        'page arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'access callback' => '_hax_node_access',
        'access arguments' => array('update', 1),
    );
    $items['admin/config/content/hax'] = array(
        'title' => 'HAX',
        'description' => 'Settings for basic customizations to HAX.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('hax_settings'),
        'type' => MENU_NORMAL_ITEM,
        'access arguments' => array('administer site configuration'),
    );
    return $items;
}

/**
 * Implements hook_node_view().
 */
function hax8_node_view(Drupal Core Entity EntityInterface $node, Drupal entity Plugin Core Entity EntityDisplay $display, $view_mode, $langcode) {
    if ($view_mode == 'full' && variable_get('hax_autoload_element_node_view', TRUE)) {
        // generate autoload list
        $elementstring = variable_get('hax_autoload_element_list', 'video-player wikipedia-query pdf-element lrn-table media-image');
        // blow up based on space
        $elements = explode(' ', $elementstring);
        foreach ($elements as $element) {
            $component = new stdClass();
            $component->machine_name = $element;
            // pull in from webcomponents location
            $component->file = libraries_get_path('webcomponents') . '/polymer/bower_components/' . $element . '/' . $element . '.html';
            _webcomponents_add_to_head($component, 10001);
        }
    }
}

/**
 * Callback to save just the body field.
 */
function _hax8_node_save($node, $token) {
    // ensure we had data PUT here and it is valid
    if ($_SERVER['REQUEST_METHOD'] == 'PUT' && drupal_valid_token($token, 'hax')) {
        // load the data from input stream
        $body = file_get_contents("php://input");
        $node->body['und'][0]['value'] = $body;
        node_save($node);
        // send back happy headers
        drupal_add_http_header('Content-Type', 'application/json');
        // define status
        drupal_add_http_header('Status', 200);
        $return = array(
            'status' => 200,
            'message' => t('Save successful!'),
            'data' => $node,
        );
        // output the response as json
        print drupal_json_output($return);
    }
}

/**
 * Callback to assemble the hax app store
 */
function _hax8_load_app_store($token) {
    // ensure we had data PUT here and it is valid
    if (drupal_valid_token($token, 'hax')) {
        $appStore = module_invoke_all('hax_app_store');
        drupal_alter('hax_app_store', $appStore);
        // send back happy headers
        drupal_add_http_header('Content-Type', 'application/json');
        // define status
        drupal_add_http_header('Status', 200);
        $return = array(
            'status' => 200,
            'apps' => $appStore,
        );
        // output the response as json
        print drupal_json_output($return);
        exit;
    }
}

/**
 * Permission + Node access check.
 */
function _hax8_node_access($op, $node) {
    if (user_access('use hax') && node_access($op, $node)) {
        return TRUE;
    }
    return FALSE;
}

/**
 * Present the node form but wrap the content in hax-body tag
 * @param  [type] $node [description]
 * @return [type]       [description]
 */
function _hax8_node_form($node) {
    // set page title
    drupal_set_title(t('HAX edit @title', array('@title' => $node->title)), PASS_THROUGH);
    // fake a component to get it into the head of the document, heavy weighting
    $component = new stdClass();
    $component->machine_name = 'cms-hax';
    // pull in from webcomponents location
    $component->file = libraries_get_path('webcomponents') . '/polymer/bower_components/cms-hax/cms-hax.html';
    _webcomponents_add_to_head($component, 10000);
    // generate autoload list
    $elementstring = variable_get('hax_autoload_element_list', 'video-player wikipedia-query pdf-element lrn-table media-image');
    // blow up based on space
    $elements = explode(' ', $elementstring);
    $components = '';
    foreach ($elements as $element) {
        // sanity check
        if (!empty($element)) {
            $components .= '<' . $element . ' slot="autoloader">' . '</' . $element . '>';
        }
    }
    $appStoreConnection = array(
        'url' => base_path() . 'hax-app-store/' . drupal_get_token('hax'),
    );
    // write content to screen, wrapped in tag to do all the work
    $content = '
  <cms-hax open-default end-point="' . base_path() . 'hax-node-save/' . $node->nid . '/' . drupal_get_token('hax') . '" body-offset-left="' . variable_get('hax_offset_left', 0) . '" app-store-connection=' . "'" . json_encode($appStoreConnection) . "'" . '>'
        . $components .
        check_markup($node->body['und'][0]['value'], $node->body['und'][0]['format'])
        .'</cms-hax>';
    return $content;
}

/**
 * Helper function to make outline designer settings more obvious.
 */
function hax8_settings($form, &$form_state) {
    $form['hax_offset_left'] = array(
        '#type' => 'textfield',
        '#title' => t('Offset'),
        '#default_value' => variable_get('hax_offset_left', 0),
        '#description' => "Helps with theme compatibility when positioning the context menu. Adjust this if HAX context menu doesn't correctly align with the side of your content when editing. Value is in pixels but should not include px. Some themes that mess with box-model may or may not have this issue.",
    );
    // collapse default state
    $form['hax_autoload_element_list'] = array(
        '#type' => 'textfield',
        '#title' => t('Elements to autoload'),
        '#default_value' => variable_get('hax_autoload_element_list', 'video-player wikipedia-query pdf-element lrn-table media-image'),
        '#description' => "This allows for auto-loading elements known to play nice with HAX. If you've written any webcomponents that won't automatically be loaded into the page via that module this allows you to attempt to auto-load them when HAX loads. For example, if you have a video-player element in your bower_components directory and want it to load on this interface, this would be a simple way to do that. Spaces only between elements, no comma",
    );
    $hax = new HAXService();
    $baseApps = $hax->baseSupportedApps();
    foreach ($baseApps as $key => $app) {
        $form['hax_' . $key . '_key'] = array(
            '#type' => 'textfield',
            '#title' => t('@name API key', array('@name' => $app['name'])),
            '#default_value' => variable_get('hax_' . $key . '_key', ''),
            '#description' => t('See') . ' ' . l(t('@name developer docs', array('@name' => $app['name'])), $app['docs']) . ' ' . t('for details'),
        );
    }
    return system_settings_form($form);
}

/**
 * Implements hook_hax_app_store().
 */
function hax8_hax_app_store() {
    $hax = new HAXService();
    $apikeys = array();
    $baseApps = $hax->baseSupportedApps();
    foreach ($baseApps as $key => $app) {
        if (variable_get('hax_' . $key . '_key', '') != '') {
            $apikeys[$key] = variable_get('hax_' . $key . '_key', '');
        }
    }
    $json = $hax->loadBaseAppStore($apikeys);
    return $json;
}
